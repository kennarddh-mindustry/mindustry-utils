import * as url from 'url'

import path from 'path'
import ParseMSCH from './ParseMSCH.js'
import fs from 'fs/promises'
import CustomBuffer from './CustomBuffer.js'
import ParseLogicConfig from './ParseLogicConfig.js'
import GenerateMSCH from './GenerateMSCH.js'
import { createCanvas, loadImage } from 'canvas'
import Stile from './Data/Stile.js'
import Point2 from './Data/Point2.js'
import Byte from './Data/Number/Byte.js'
import Int from './Data/Number/Int.js'
import Content from './Data/Content.js'
import Short from './Data/Number/Short.js'
import { SorterID, SorterIDToColor } from './Data/Vars.js'
import Schematic from './Data/Schematic.js'
import NearestColor, { RGBColor } from './Utils/NearestColor.js'

const __dirname = url.fileURLToPath(new URL('.', import.meta.url))

// const deflatedData = await fs.readFile(
// 	path.join(__dirname, '../data/metaglass_core.msch')
// )

// const base64 =
// 	'bXNjaAF4nD3MQQ7CMAwEwHWSpqWceAgvQhxC8SFSm6DEVOL3uEbCp1lba8wgj1DSxgjCXXB+cl9afkmuBUBc04PXDne7e0xLLTt/akPstQk3XCRLKvm9Xf8nYIYNEQgYjHCmY+NNThVMXjWYgiriFwijKaom06id0/HrC/5OGSQ='

// const deflatedData = Buffer.from(base64, 'base64')

// const schematic = await ParseMSCH(CustomBuffer.fromBuffer(deflatedData))

// console.log(schematic)

const art = await loadImage(path.join(__dirname, '../data/image.png'))

const width = 20
const height = 20

const canvas = createCanvas(width, height)
const ctx = canvas.getContext('2d')

ctx.drawImage(art, 0, 0, width, height)

const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)
const data = imgData.data

const tiles: Stile[] = []

let pixelCounter = 0

for (let i = 0; i < data.length; i += 4) {
	const red = data[i]
	const green = data[i + 1]
	const blue = data[i + 2]
	const alpha = data[i + 3]

	if (alpha < 127) continue

	const rgb: RGBColor = {
		r: red,
		g: green,
		b: blue,
	}

	const nearestColor = NearestColor(Object.values(SorterIDToColor), rgb)

	const sorterID = parseInt(
		Object.keys(SorterIDToColor)[
			Object.values(SorterIDToColor).indexOf(nearestColor as any)
		],
		10
	) as SorterID

	tiles.push(
		new Stile(
			'sorter',
			new Point2(
				new Int(width - (pixelCounter % width)),
				new Int(height - Math.floor(pixelCounter / height))
			),
			new Content(new Byte(0), new Short(sorterID)),
			new Byte(0)
		)
	)

	pixelCounter += 1
}

const schematic = new Schematic(
	new Byte(1),
	tiles,
	{
		name: 'Pixel Art',
		description: 'Generated by mindustry-utils',
		labels: '[]',
	},
	new Short(width),
	new Short(height)
)

const schemBuffer = await GenerateMSCH(schematic)
// console.log(tiles)

console.log(schemBuffer.toString('base64'))

await fs.writeFile(
	path.join(__dirname, '../data/output.png'),
	canvas.toBuffer('image/png')
)

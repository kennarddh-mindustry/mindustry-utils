import CustomBuffer from './CustomBuffer.js'
import GenerateMSCH from './GenerateMSCH.js'
import { createCanvas, ImageData, Image, Canvas } from 'canvas'
import Stile from './Data/Stile.js'
import Point2 from './Data/Point2.js'
import Byte from './Data/Number/Byte.js'
import Int from './Data/Number/Int.js'
import Content from './Data/Content.js'
import Short from './Data/Number/Short.js'
import { SorterID, SorterIDToColor } from './Data/Vars.js'
import Schematic from './Data/Schematic.js'
import NearestColor, { RGBColor } from './Utils/NearestColor.js'

const GenerateSorterArt = async ({
	canvas,
	schematicTags = {
		name: 'Pixel Art',
		description: 'Generated by mindustry-utils',
		labels: '["Pixel Art"]',
	},
}: Partial<{
	canvas: Canvas
	schematicTags: Record<string, string>
}>): Promise<CustomBuffer> => {
	const ctx = canvas.getContext('2d')

	const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data

	// Generate MSCH
	const tiles: Stile[] = []

	let pixelCounter = 0

	for (let i = 0; i < data.length; i += 4) {
		const red = data[i]
		const green = data[i + 1]
		const blue = data[i + 2]
		const alpha = data[i + 3]

		if (alpha < 127) {
			pixelCounter += 1

			continue
		}

		const rgb: RGBColor = {
			r: red,
			g: green,
			b: blue,
		}

		const nearestColor = NearestColor(Object.values(SorterIDToColor), rgb)

		const sorterID = parseInt(
			Object.keys(SorterIDToColor)[
				Object.values(SorterIDToColor).indexOf(nearestColor as any)
			],
			10
		) as SorterID

		tiles.push(
			new Stile(
				'sorter',
				new Point2(
					new Int(canvas.width - (pixelCounter % canvas.width)),
					new Int(canvas.height - Math.floor(pixelCounter / canvas.height))
				),
				new Content(new Byte(0), new Short(sorterID)),
				new Byte(0)
			)
		)

		pixelCounter += 1
	}

	const schematic = new Schematic(
		new Byte(1),
		tiles,
		schematicTags,
		new Short(canvas.width),
		new Short(canvas.height)
	)

	const schematicBuffer = await GenerateMSCH(schematic)

	return schematicBuffer
}

export default GenerateSorterArt
